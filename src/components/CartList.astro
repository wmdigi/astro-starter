---
import { getGroupedProducts } from "@lib/utils";
import Input from "./Input.astro";
import Link from "./Link.astro";

const locals = Astro.locals;
const products = getGroupedProducts(locals.cart.products);

const { preview = false } = Astro.props;

const MODULE = "CartList";
---

<script>
	import { actions } from "astro:actions";
	import { products } from "@lib/data";
	import { log } from "@log";

	$("#cart-products-summary").addClass("server-loaded");

	// Increase product count
	$(".cart-product-count-increase").on("click", async function () {
		const slug = $(this).data("slug");
		const { data } = await actions.cart.addToCart({ product: slug });

		if (data?.success) {
			const cartProducts = Array.isArray(data.data.cart.products)
				? data.data.cart.products
				: Object.values(data.data.cart.products);

			$.store.cart = {
				total: cartProducts.length,
				products: cartProducts,
			};

			const count = cartProducts.filter((item) => item === slug).length;
			$(`#cart-product-count input[data-slug="${slug}"]`).val(count);
		}
	});

	// Decrease product count
	$(".cart-product-count-decrease").on("click", async function () {
		const slug = $(this).data("slug");
		const { data } = await actions.cart.removeFromCart({ product: slug });

		if (data?.success) {
			const cartProducts = Array.isArray(data.data.cart.products)
				? data.data.cart.products
				: Object.values(data.data.cart.products);

			$.store.cart = {
				total: cartProducts.length,
				products: cartProducts,
			};

			const count = cartProducts.filter((item) => item === slug).length;
			$(`#cart-product-count input[data-slug="${slug}"]`).val(count);

			if (count === 0) {
				$(`#product-${slug}`).addClass("hidden");
			}
		}
	});

	$.store.cart.subscribe((cart) => {
		log(MODULE, "Cart subscription value: ", cart);

		if (cart.total === 0) {
			$("#cart-products-summary").addClass("empty");
			return;
		}

		$("#cart-products-summary").removeClass("empty");

		const cartProducts = Array.isArray(cart.products) ? cart.products : Object.values(cart.products);

		const totalPrice = cartProducts
			.map((slug) => {
				const product = products.find((p) => p.slug === slug);
				return product ? product.price : 0;
			})
			.reduce((acc, price) => acc + Number(price), 0)
			.toFixed(2);

		$("#product-summary").html(`$${totalPrice}`);
	});
</script>

<div
	id="cart-products-summary"
	class="group/summary w-full h-full flex flex-col items-start justify-start gap-8 overflow-hidden opacity-0 [.server-loaded&]:opacity-100 [.server-loaded&]:motion-preset-focus motion-delay-150"
>
	<div class="w-full h-full flex flex-col items-start justify-start gap-8 group-[.empty]/summary:hidden">
		{
			products.map(({ title, price, count, slug }) => (
				<div
					id={`product-${slug}`}
					class:list={[
						"w-full grid place-items-start items-center gap-8",
						preview ? "grid-cols-2" : "grid-cols-4",
					]}
				>
					<h5 class="font-light">{title}</h5>
					{!preview && (
						<div
							id="cart-product-count"
							class="flex h-14 flex-row items-center p-1 justify-center border border-black dark:border-white rounded-full overflow-hidden"
						>
							<button
								data-slug={slug}
								class="cart-product-count-decrease px-4 aspect-square h-full bg-transparent hover:bg-[#131313] dark:hover:bg-white text-black hover:text-white dark:hover:text-black relative overflow-hidden text-2xl rounded-full before:-z-[1] before:absolute before:bg-gradient before:inset-0 transition-default"
							>
								-
							</button>
							<Input
								id="cart-product-count-input"
								data-slug={slug}
								type="number"
								value={count}
								class="!w-[4rem] h-full rounded-none !border-none !text-black dark:!text-white !text-center !bg-transparent"
							/>
							<button
								data-slug={slug}
								class="cart-product-count-increase px-4 aspect-square h-full bg-transparent hover:bg-[#131313] dark:hover:bg-white text-black hover:text-white dark:hover:text-black relative overflow-hidden text-2xl rounded-full before:-z-[1] before:absolute before:bg-gradient before:inset-0 transition-default"
							>
								+
							</button>
						</div>
					)}
					<h5 class="justify-self-end">${price}</h5>
				</div>
			))
		}
		<div
			id="product-summary"
			class:list={[
				"w-full grid place-items-start items-center gap-8 pt-16 border-t border-black/20 dark:border-white/20",
				preview ? "grid-cols-3" : "grid-cols-4",
			]}
		>
			<h5>Summary</h5>
			<div></div>
			<h5 id="product-summary-price" class="justify-self-end">$0</h5>
			{
				!preview && (
					<Link href="/checkout" class="justify-self-end">
						Checkout
					</Link>
				)
			}
		</div>
	</div>

	<div class="w-full h-full py-16 items-center justify-center hidden group-[.empty]/summary:flex">
		<h5>Cart is empty</h5>
	</div>
</div>
